---
import '../styles/global.css';
import ToolSearch from '../components/ui/ToolSearch.tsx';
import ToolSidebar from '../components/ui/ToolSidebar.tsx';
import CookieConsent from '../components/CookieConsent.tsx';
import AdPlacement from '../components/ads/AdPlacement.astro';
import { LogoLink } from '../components/ui/Logo.tsx';
import { getAdSenseClientId } from '../lib/adsense';

export interface Props {
  title: string;
  description: string;
  keywords?: string[];
  canonical?: string;
  ogImage?: string;
  jsonLd?: Record<string, any>;
  robotsContent?: string;
  showSidebar?: boolean;
  fullWidth?: boolean;
}

const {
  title,
  description,
  keywords = [],
  canonical,
  ogImage,
  jsonLd,
  robotsContent,
  showSidebar = true,
  fullWidth = false
} = Astro.props;

const layoutContainerClass = [
  'w-full',
  fullWidth ? 'px-4 sm:px-6 lg:px-10' : 'mx-auto max-w-5xl px-4 sm:px-6 lg:px-8'
].filter(Boolean).join(' ');

// Ensure keywords is always an array
const keywordsArray = Array.isArray(keywords) ? keywords : (typeof keywords === 'string' ? keywords.split(',').map(k => k.trim()) : []);

// Prefer configured site from astro.config, fall back to production domain
const siteUrl = Astro.site?.href || 'https://freeformathub.com';
const fullTitle = title === 'FreeFormatHub' ? title : `${title} | FreeFormatHub`;
// Normalize canonical to prefer new URL structure without the /tools prefix
const rawPath = Astro.url.pathname;
const normalizedPath = rawPath.startsWith('/tools/')
  ? rawPath.replace(/^\/tools\//, '/')
  : rawPath;
const canonicalURL = canonical || new URL(normalizedPath, siteUrl).href;
const imageUrl = ogImage || new URL('/og-image.png', siteUrl).href;
const ogLocale = 'en_US';
const twitterSite = '@freeformathub';
const robots = robotsContent || 'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1';
// Google Analytics ID (from env with fallback)
const GA_ID = import.meta.env.PUBLIC_GA_MEASUREMENT_ID || 'G-34Z7YVSEZ2';
const AD_SENSE_CLIENT_ID = getAdSenseClientId();

interface NavLink {
  href: string;
  label: string;
}

const secondaryNavLinks: NavLink[] = [
  { href: '/', label: 'Home' },
  { href: '/tools', label: 'Tools' },
  { href: '/blog', label: '🛠️ Blog' },
  { href: '/formatters', label: 'Formatters' },
  { href: '/converters', label: 'Converters' },
  { href: '/encoders', label: 'Encoders' },
  { href: '/json-tools', label: 'JSON Tools' },
  { href: '/data-converters', label: 'Data Converters' },
  { href: '/text-tools', label: 'Text Tools' },
  { href: '/password-tools', label: 'Security Tools' },
  { href: '/cli-cheatsheets', label: 'CLI Cheat Sheets' }
];

const currentPath = Astro.url.pathname;
const isActiveLink = (href: string) => {
  if (href === '/') {
    return currentPath === '/';
  }
  return currentPath === href || currentPath.startsWith(`${href}/`);
};

const getNavLinkClasses = (active: boolean) => [
  'inline-flex items-center gap-2 px-3 py-2 text-sm font-medium rounded-lg transition-colors border',
  active
    ? 'bg-blue-600 text-white border-blue-600 shadow-sm'
    : 'text-[color:var(--color-text-secondary)] border-transparent hover:text-[color:var(--color-text-primary)] hover:bg-[color:var(--color-surface-secondary)]'
].join(' ');
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />
    {keywordsArray.length > 0 && <meta name="keywords" content={keywordsArray.join(', ')} />}
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.svg" />
    <link rel="manifest" href="/site.webmanifest" />

    <!-- PWA Icons -->
    <meta name="theme-color" content="#3b82f6" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageUrl} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="FreeFormatHub" />
    <meta property="og:locale" content={ogLocale} />
    <meta property="og:image:alt" content={fullTitle} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={imageUrl} />
    <meta name="twitter:site" content={twitterSite} />
    
    <!-- Theme -->
    <meta name="theme-color" content="#5b7c99" />
    <meta name="color-scheme" content="light" />
    
    <!-- Core Web Vitals 2025 Optimizations -->
    <!-- Critical Resource Preloads (LCP optimization) -->
    <link rel="preload" href="/og-image.png" as="image" type="image/png" />
    <link rel="preload" href="/favicon.svg" as="image" type="image/svg+xml" />
    <link rel="preload" href="/_astro/client.js" as="script" crossorigin />

    <!-- Critical Network Preconnects (reduce connection time) -->
    <link rel="preconnect" href="https://www.googletagmanager.com" crossorigin />
    <link rel="preconnect" href="https://pagead2.googlesyndication.com" crossorigin />
    <link rel="preconnect" href="https://www.google-analytics.com" crossorigin />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="dns-prefetch" href="https://googleads.g.doubleclick.net" />
    <link rel="dns-prefetch" href="https://tpc.googlesyndication.com" />

    <!-- Font Loading Optimization (CLS prevention) -->
    <link rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'"
          href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" />
    <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" /></noscript>

    <!-- Performance Hints for Modern Browsers -->
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover, user-scalable=no" />
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob: data:; object-src 'none'; base-uri 'none';" />

    <!-- Critical CSS Inline (implement separately) -->
    <!-- Font Display Swap for Better CLS -->
    <style>
      @font-face {
        font-family: 'Inter';
        font-display: swap;
        src: local('Inter');
      }
      /* Critical above-the-fold styles */
      html { font-family: system-ui, -apple-system, sans-serif; }
      body { margin: 0; padding: 0; min-height: 100vh; }
      .hero-section { min-height: 60vh; }
      img { max-width: 100%; height: auto; }
    </style>
    
    <!-- JSON-LD Structured Data -->
    {jsonLd && (
      <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
    )}
    
    <!-- Performance + robots -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="robots" content={robots} />

    <!-- Google AdSense Site Verification -->
    <meta name="google-adsense-account" content={AD_SENSE_CLIENT_ID} />
    {import.meta.env.PUBLIC_ADSENSE_VERIFICATION && (
      <meta name="google-site-verification" content={import.meta.env.PUBLIC_ADSENSE_VERIFICATION} />
    )}


    <!-- Google Search Console Verification (separate from AdSense) -->
    {import.meta.env.PUBLIC_GOOGLE_SEARCH_CONSOLE_VERIFICATION && (
      <meta name="google-site-verification" content={import.meta.env.PUBLIC_GOOGLE_SEARCH_CONSOLE_VERIFICATION} />
    )}

    <!-- Enhanced SEO Meta Tags -->
    <meta name="author" content="zmarin.zmcor" />
    <meta name="publisher" content="FreeFormatHub" />
    <meta name="copyright" content="© 2024 zmarin.zmcor. All rights reserved." />
    <meta name="application-name" content="FreeFormatHub" />
    <meta name="apple-mobile-web-app-title" content="FreeFormatHub" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="mobile-web-app-capable" content="yes" />

    <!-- Enhanced Security -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="SAMEORIGIN" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />

    <!-- Geographic and Language Meta -->
    <meta name="geo.region" content="HR" />
    <meta name="geo.placename" content="Split, Croatia" />
    <meta name="geo.position" content="43.5081;16.4402" />
    <meta name="ICBM" content="43.5081, 16.4402" />
    <meta name="language" content="English" />
    <meta name="distribution" content="global" />
    <meta name="rating" content="general" />

    <!-- Microsoft/Bing -->
    <meta name="msvalidate.01" content={import.meta.env.PUBLIC_BING_VERIFICATION} />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    <meta name="msapplication-config" content="/browserconfig.xml" />

    <!-- Yandex -->
    <meta name="yandex-verification" content={import.meta.env.PUBLIC_YANDEX_VERIFICATION} />

    <!-- Pinterest -->
    <meta name="p:domain_verify" content={import.meta.env.PUBLIC_PINTEREST_VERIFICATION} />

    <!-- Facebook Domain Verification -->
    <meta name="facebook-domain-verification" content={import.meta.env.PUBLIC_FACEBOOK_DOMAIN_VERIFICATION} />

    <!-- Google Tag Manager removed to avoid conflicts with GA4 direct implementation -->

    <!-- Google Consent Mode v2 (must load before gtag) -->
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}

      // Set default consent state (GDPR compliant - deny all by default)
      gtag('consent', 'default', {
        'ad_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied',
        'analytics_storage': 'denied' // Deny by default, grant after user consent
      });

      console.log('📋 Google Consent Mode initialized - all consent denied by default');
    </script>

    <!-- Google tag (gtag.js) - Load with high priority but async -->
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_ID}`}></script>
    <script define:vars={{GA_ID}}>
      // GA ID injected at build time
      const GA_ID_VALUE = GA_ID;
      // Expose for module scripts
      window.GA_ID = GA_ID_VALUE;

      // Initialize dataLayer and gtag function immediately
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}

      // Initialize GA4 configuration (consent-aware)
      function initializeGA4() {
        console.log('🔧 Initializing GA4 configuration...');

        gtag('js', new Date());
        gtag('config', GA_ID, {
          // Transport method for better reliability
          transport_type: 'beacon',
          // Enable debug mode for development
          debug_mode: location.hostname === 'localhost' || location.hostname === '127.0.0.1',
          // Send page views automatically
          send_page_view: true,
          // Enhanced measurement for better tracking
          enhanced_measurement: true,
          // Custom parameters for better segmentation
          custom_map: {
            custom_parameter_1: 'match_type',
            custom_parameter_2: 'match_score'
          },
          // Real-time reporting
          allow_google_signals: true,
          allow_ad_personalization_signals: true,
          // Add page referrer for better attribution
          page_referrer: document.referrer || '(direct)'
        });

        console.log('✅ GA4 configuration completed');
      }

      // Function to send page view with enhanced data
      function sendPageView() {
        if (typeof gtag !== 'function') {
          console.warn('⚠️ gtag not available for page view tracking');
          return;
        }

        gtag('event', 'page_view', {
          send_to: GA_ID,
          page_title: document.title,
          page_location: window.location.href,
          page_path: window.location.pathname,
          page_referrer: document.referrer || '(direct)',
          engagement_time_msec: 1
        });

        console.log('📊 Page view sent to GA4');
      }

      // Function to check consent and initialize tracking
      function checkConsentAndTrack() {
        try {
          const consentData = localStorage.getItem('freeformathub_consent');
          let hasAnalyticsConsent = false;

          if (consentData) {
            const consent = JSON.parse(consentData);
            hasAnalyticsConsent = consent.state && consent.state.analytics;
          }

          console.log('🍪 Analytics consent status:', hasAnalyticsConsent);

          if (hasAnalyticsConsent) {
            // Update consent mode to granted
            gtag('consent', 'update', {
              'analytics_storage': 'granted'
            });

            // Send page view after consent is granted
            sendPageView();

            // Start engagement tracking
            startEngagementTracking();

            console.log('✅ Analytics tracking enabled with user consent');
          } else {
            console.log('❌ Analytics tracking disabled - no user consent');
          }
        } catch (error) {
          console.warn('⚠️ Error checking consent:', error);
        }
      }

      // Track page engagement
      let engagementTimer;
      function startEngagementTracking() {
        function trackEngagement() {
          if (typeof gtag === 'function') {
            gtag('event', 'user_engagement', {
              send_to: GA_ID,
              engagement_time_msec: 15000
            });
          }
          clearTimeout(engagementTimer);
          engagementTimer = setTimeout(trackEngagement, 15000);
        }

        setTimeout(trackEngagement, 1000);

        // Track scroll depth
        let scrollDepth = 0;
        window.addEventListener('scroll', () => {
          const currentScroll = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
          if (currentScroll > scrollDepth && currentScroll % 25 === 0 && typeof gtag === 'function') {
            scrollDepth = currentScroll;
            gtag('event', 'scroll', {
              send_to: GA_ID,
              percent_scrolled: scrollDepth
            });
          }
        });

        console.log('📈 Engagement tracking started');
      }

      // Initialize GA4 immediately
      initializeGA4();

      // Send basic page view (no personal data) immediately for tag detection
      gtag('event', 'page_view', {
        send_to: GA_ID,
        page_title: document.title,
        page_location: window.location.href,
        page_path: window.location.pathname,
        consent_state: 'none',
        user_data_collection: false
      });
      console.log('📊 Basic page view sent (no personal data)');

      // Check consent after DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', checkConsentAndTrack);
      } else {
        setTimeout(checkConsentAndTrack, 100);
      }

      // Listen for consent changes
      window.addEventListener('storage', function(e) {
        if (e.key === 'freeformathub_consent') {
          checkConsentAndTrack();
        }
      });

      // Listen for custom consent events
      window.addEventListener('consentChanged', function(e) {
        if (e.detail && e.detail.analytics) {
          checkConsentAndTrack();
        }
      });

      // Initialize enhanced tracking after a brief delay
      setTimeout(() => {
        if (typeof window !== 'undefined' && window.initEnhancedTracking) {
          window.initEnhancedTracking();
        }
      }, 2000);

      console.log('🚀 GA4 system initialized with consent-aware tracking');
    </script>

    <!-- Enhanced Analytics Tracking -->
    <script is:inline>
      // Read GA ID from global (set by classic script)
      const GA_ID = window.GA_ID || 'G-34Z7YVSEZ2';
      // Enhanced tracking initialization - inline to avoid import issues
      function initEnhancedTracking() {
        if (typeof window === 'undefined' || typeof window.gtag !== 'function') {
          console.log('Enhanced tracking: gtag not available');
          return;
        }

        // Track initial page performance
        if (window.performance) {
          const navigation = window.performance.getEntriesByType('navigation')[0];
          if (navigation) {
            setTimeout(() => {
              window.gtag('event', 'performance', {
                send_to: GA_ID,
                metric_name: 'page_load_time',
                metric_value: navigation.loadEventEnd - navigation.fetchStart,
                custom_parameter_1: (navigator?.connection?.effectiveType || 'unknown')
              });
            }, 1000);
          }
        }

        // Track device and viewport info
        window.gtag('event', 'device_info', {
          send_to: GA_ID,
          screen_resolution: `${screen.width}x${screen.height}`,
          viewport_size: `${window.innerWidth}x${window.innerHeight}`,
          color_depth: screen.colorDepth,
          pixel_ratio: window.devicePixelRatio,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          language: navigator.language
        });

        console.log('✅ Enhanced analytics tracking initialized');
      }

      // Make tracking available globally
      window.initEnhancedTracking = initEnhancedTracking;

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initEnhancedTracking);
      } else {
        initEnhancedTracking();
      }
    </script>

    <!-- Google AdSense Auto ads - Required on every page -->
    <script async src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${AD_SENSE_CLIENT_ID}`}
         crossorigin="anonymous"></script>

    <!-- AdSense initialization and consent handling -->
    <script>
      // Initialize adsbygoogle array immediately
      window.adsbygoogle = window.adsbygoogle || [];

      // Function to handle AdSense consent state
      function handleAdSenseConsent() {
        try {
          const consentData = localStorage.getItem('freeformathub_consent');
          let hasMarketingConsent = false;

          if (consentData) {
            const consent = JSON.parse(consentData);
            hasMarketingConsent = consent.state && consent.state.marketing;
          }

          console.log('🍪 AdSense consent status:', hasMarketingConsent);

          // Update Google consent mode for ads
          if (typeof gtag === 'function') {
            gtag('consent', 'update', {
              'ad_storage': hasMarketingConsent ? 'granted' : 'denied',
              'ad_user_data': hasMarketingConsent ? 'granted' : 'denied',
              'ad_personalization': hasMarketingConsent ? 'granted' : 'denied'
            });
          }

          // Enable/disable AdSense ads based on consent
          if (hasMarketingConsent) {
            console.log('✅ AdSense ads enabled with user consent');
            // Auto ads will automatically start showing when consent is granted
          } else {
            console.log('❌ AdSense ads disabled - no marketing consent');
          }
        } catch (error) {
          console.warn('⚠️ Error handling AdSense consent:', error);
        }
      }

      // Check consent after DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', handleAdSenseConsent);
      } else {
        setTimeout(handleAdSenseConsent, 100);
      }

      // Listen for consent changes
      window.addEventListener('storage', function(e) {
        if (e.key === 'freeformathub_consent') {
          handleAdSenseConsent();
        }
      });

      // Listen for custom consent events
      window.addEventListener('consentChanged', function(e) {
        if (e.detail && (e.detail.marketing !== undefined)) {
          handleAdSenseConsent();
        }
      });

      console.log('🚀 AdSense Auto ads script loaded with consent-aware handling');
    </script>


    <!-- Core Web Vitals 2025 Performance Monitoring -->
    <script>
      // Core Web Vitals Monitoring with web-vitals library fallback
      (function() {
        'use strict';

        // Metrics tracking object
        const metrics = { lcp: 0, fid: 0, cls: 0, inp: 0 };

        // Enhanced LCP tracking with element identification
        function trackLCP() {
          if (!window.PerformanceObserver) return;

          const observer = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            const lastEntry = entries[entries.length - 1];
            metrics.lcp = Math.round(lastEntry.startTime);

            // Send to GA4 if available
            if (typeof gtag === 'function') {
              gtag('event', 'web_vitals', {
                event_category: 'Core Web Vitals',
                event_label: 'LCP',
                value: metrics.lcp,
                custom_parameter_1: lastEntry.element ? lastEntry.element.tagName : 'unknown'
              });
            }

            console.log(`🎯 LCP: ${metrics.lcp}ms`, lastEntry.element);
          });

          observer.observe({entryTypes: ['largest-contentful-paint']});
        }

        // Enhanced FID/INP tracking
        function trackInteraction() {
          if (!window.PerformanceObserver) return;

          // Track First Input Delay
          const fidObserver = new PerformanceObserver((list) => {
            const entry = list.getEntries()[0];
            metrics.fid = Math.round(entry.processingStart - entry.startTime);

            if (typeof gtag === 'function') {
              gtag('event', 'web_vitals', {
                event_category: 'Core Web Vitals',
                event_label: 'FID',
                value: metrics.fid
              });
            }

            console.log(`⚡ FID: ${metrics.fid}ms`);
          });

          fidObserver.observe({entryTypes: ['first-input']});

          // Track Interaction to Next Paint (INP) - 2025 metric
          let interactions = [];
          const inpObserver = new PerformanceObserver((list) => {
            list.getEntries().forEach((entry) => {
              interactions.push(entry.duration);
              if (interactions.length > 10) interactions.shift();

              const inp = Math.max(...interactions);
              metrics.inp = Math.round(inp);

              if (typeof gtag === 'function' && inp > 200) { // Only report slow INP
                gtag('event', 'web_vitals', {
                  event_category: 'Core Web Vitals',
                  event_label: 'INP',
                  value: metrics.inp
                });
              }
            });
          });

          inpObserver.observe({entryTypes: ['event']});
        }

        // Enhanced CLS tracking with element identification
        function trackCLS() {
          if (!window.PerformanceObserver) return;

          let clsValue = 0;
          const observer = new PerformanceObserver((list) => {
            list.getEntries().forEach((entry) => {
              if (!entry.hadRecentInput) {
                clsValue += entry.value;
                metrics.cls = Math.round(clsValue * 1000) / 1000;
              }
            });

            if (typeof gtag === 'function' && clsValue > 0.1) { // Only report poor CLS
              gtag('event', 'web_vitals', {
                event_category: 'Core Web Vitals',
                event_label: 'CLS',
                value: Math.round(clsValue * 1000)
              });
            }

            console.log(`📐 CLS: ${metrics.cls}`);
          });

          observer.observe({entryTypes: ['layout-shift']});
        }

        // Performance budget alerts
        function checkPerformanceBudget() {
          setTimeout(() => {
            const budgetViolations = [];

            if (metrics.lcp > 2500) budgetViolations.push(`LCP: ${metrics.lcp}ms (target: <2500ms)`);
            if (metrics.fid > 100) budgetViolations.push(`FID: ${metrics.fid}ms (target: <100ms)`);
            if (metrics.cls > 0.1) budgetViolations.push(`CLS: ${metrics.cls} (target: <0.1)`);

            if (budgetViolations.length > 0) {
              console.warn('⚠️ Performance Budget Violations:', budgetViolations);
            } else {
              console.log('✅ Performance Budget: All metrics within targets');
            }
          }, 5000);
        }

        // Initialize monitoring on page load
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', () => {
            trackLCP();
            trackInteraction();
            trackCLS();
            checkPerformanceBudget();
          });
        } else {
          trackLCP();
          trackInteraction();
          trackCLS();
          checkPerformanceBudget();
        }

        // Expose metrics for debugging
        window.getWebVitals = () => metrics;
      })();
    </script>
  </head>
  
  <body style="background-color: var(--color-background); color: var(--color-text-primary);">
    <!-- GTM noscript removed (using GA4 direct implementation) -->

    <!-- Skip to main content -->
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4
             bg-blue-600 text-white px-4 py-2 rounded-md z-50
             focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
    >
      Skip to main content
    </a>

    <div class="min-h-screen w-full bg-[color:var(--color-background)] text-[color:var(--color-text-primary)] flex">
      {showSidebar && (
        <aside
          class="hidden lg:flex lg:w-72 xl:w-80 flex-col border-r border-[color:var(--color-border)] bg-[#0f172a] text-white"
          aria-label="Primary tool navigation"
        >
          <div class="flex items-center justify-between border-b border-white/10 px-6 py-5">
            <LogoLink href="/" size="small" theme="dark" client:load />
            <span class="text-xs uppercase tracking-[0.35em] text-white/50">Tools</span>
          </div>
          <div class="flex-1 overflow-y-auto px-4 py-4">
            <ToolSidebar currentPath={currentPath} theme="dark" client:load />
          </div>
        </aside>
      )}

      <div class="flex min-h-screen flex-1 flex-col">
        <!-- Top bar -->
        <header class="border-b border-[#1f2a41] bg-[#152238] text-white shadow-sm">
          <div class="px-4 py-5 sm:px-6 lg:px-8">
            <div class="flex flex-wrap items-center gap-3">
              <button
                id="mobile-menu-toggle"
                type="button"
                class="inline-flex h-10 w-10 items-center justify-center rounded-lg border border-white/10 bg-white/10 text-white transition hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/40 lg:hidden"
                aria-label="Open menu"
              >
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
              <LogoLink href="/" size="small" theme="dark" client:load />
              <span class="hidden lg:inline text-[0.65rem] uppercase tracking-[0.4em] text-white/60">
                Free Online Tools
              </span>
            </div>

            <div class="mt-5">
              <div class="rounded-2xl border border-white/10 bg-white/10 p-2 backdrop-blur">
                <ToolSearch
                  placeholder="Search 100+ developer tools..."
                  size="large"
                  className="text-left"
                  client:load
                />
              </div>
            </div>

            <div class="mt-5 hidden xl:block">
              <nav aria-label="Popular tool collections">
                <ul class="flex flex-wrap items-center gap-3">
                  {secondaryNavLinks.map((link) => {
                    const active = isActiveLink(link.href);
                    return (
                      <li key={link.href}>
                        <a
                          href={link.href}
                          class={`inline-flex items-center gap-2 rounded-full border px-3 py-2 text-sm font-medium transition ${
                            active
                              ? 'border-white/40 bg-white/20 text-white shadow-sm'
                              : 'border-white/10 bg-white/5 text-white/80 hover:border-white/30 hover:bg-white/10'
                          }`}
                        >
                          {link.label}
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </nav>
            </div>
          </div>
        </header>

        <!-- Mobile Menu Overlay -->
        <div id="mobile-menu-overlay" class="mobile-menu-overlay"></div>

        <!-- Mobile Menu -->
        <nav id="mobile-menu" class="mobile-menu">
          <div style="padding: var(--space-xl);">
            <!-- Mobile Menu Header -->
            <div class="mb-8 flex items-center justify-between">
              <LogoLink href="/" size="small" client:load />
              <button
                id="mobile-menu-close"
                type="button"
                class="btn btn-outline btn-icon-only"
                aria-label="Close menu"
              >
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <!-- Mobile Navigation Links -->
            <div style="display: flex; flex-direction: column; gap: var(--space-lg);">
              <a href="/" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                Home
              </a>
              <a href="/tools" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                </svg>
                Tools
              </a>
              <a href="/formatters" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                </svg>
                Formatters
              </a>
              <a href="/converters" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                </svg>
                Converters
              </a>
              <a href="/encoders" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                </svg>
                Encoders
              </a>

              <!-- Business Tools Section -->
              <div style="margin-top: var(--space-lg); padding-top: var(--space-lg); border-top: 1px solid var(--color-border);">
                <h4 style="font-size: 0.875rem; font-weight: 600; color: var(--color-text-secondary); text-transform: uppercase; letter-spacing: 0.05em; margin-bottom: var(--space-md);">Business Tools</h4>
                <div style="display: flex; flex-direction: column; gap: var(--space-sm);">
                  <a href="/json-tools" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    JSON Tools
                  </a>
                  <a href="/data-converters" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                    </svg>
                    Data Converters
                  </a>
                  <a href="/text-tools" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16" />
                    </svg>
                    Text Tools
                  </a>
                  <a href="/password-tools" class="btn btn-outline" style="justify-content: flex-start; font-weight: 500;">
                    <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                    Security Tools
                  </a>
                </div>
              </div>
            </div>
          </div>
        </nav>

        <!-- Main content -->
        <main id="main-content" class="flex-1 py-10">
          <div class={layoutContainerClass}>
            <slot />
          </div>
        </main>

        <!-- Footer -->
        <footer style="background-color: var(--color-surface-secondary); border-top: 1px solid var(--color-border);">
          <!-- Footer Ad Placement -->
          <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-6">
            <AdPlacement type="footer" lazy={true} />
          </div>

          <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-2 gap-8 md:grid-cols-4">
              <div>
                <h3 style="font-size: 0.875rem; font-weight: 600; color: var(--color-text-primary); text-transform: uppercase; letter-spacing: 0.05em;">Tools</h3>
                <ul style="margin-top: 1rem; display: flex; flex-direction: column; gap: 0.5rem;">
                  <li><a href="/formatters/json-formatter" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">JSON Formatter</a></li>
                  <li><a href="/encoders/base64-encoder" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Base64 Encoder</a></li>
                  <li><a href="/encoders/url-encoder" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">URL Encoder</a></li>
                  <li><a href="/encoders/jwt-decoder" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">JWT Decoder</a></li>
                </ul>
              </div>
              <div>
                <h3 style="font-size: 0.875rem; font-weight: 600; color: var(--color-text-primary); text-transform: uppercase; letter-spacing: 0.05em;">Categories</h3>
                <ul style="margin-top: 1rem; display: flex; flex-direction: column; gap: 0.5rem;">
                  <li><a href="/formatters" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Formatters</a></li>
                  <li><a href="/converters" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Converters</a></li>
                  <li><a href="/encoders" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Encoders</a></li>
                  <li><a href="/text" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Text Tools</a></li>
                </ul>
              </div>
              <div>
                <h3 style="font-size: 0.875rem; font-weight: 600; color: var(--color-text-primary); text-transform: uppercase; letter-spacing: 0.05em;">Support</h3>
                <ul style="margin-top: 1rem; display: flex; flex-direction: column; gap: 0.5rem;">
                  <li><a href="/about" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">About</a></li>
                  <li><a href="/privacy" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Privacy Policy</a></li>
                  <li><a href="/terms" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Terms of Service</a></li>
                  <li><a href="/contact" style="font-size: 0.875rem; color: var(--color-text-secondary); transition: color 0.2s;" onmouseover="this.style.color='var(--color-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">Contact</a></li>
                </ul>
              </div>
              <div class="flex items-start justify-center">
                <AdPlacement type="sidebar" lazy={true} />
              </div>
            </div>
            <div style="margin-top: 2rem; padding-top: 2rem; border-top: 1px solid var(--color-border);">
              <p style="font-size: 0.875rem; color: var(--color-text-secondary); text-align: center;">
                © 2024 zmarin.zmcor. All rights reserved. | Z MARIN, obrt za usluge, Kijevska 5, Split, Croatia, EU, MBS 98472739
              </p>
            </div>
          </div>
        </footer>
      </div>
    </div>

    <!-- Cookie Consent Banner -->
    <CookieConsent client:load />

    <!-- Fallback Cookie Consent Script (in case React component fails to load) -->
    <script>
      // Fallback consent banner if React component doesn't load
      setTimeout(() => {
        if (typeof window !== 'undefined' && !localStorage.getItem('freeformathub_consent')) {
          // Check if React component is visible
          const existingBanner = document.querySelector('[data-testid="cookie-consent"]') ||
                                 document.querySelector('.fixed.inset-x-0.bottom-0');

          if (!existingBanner) {
            console.log('🍪 React cookie banner not detected, showing fallback');
            showFallbackCookieBanner();
          }
        }
      }, 3000); // Wait 3 seconds for React to hydrate

      function showFallbackCookieBanner() {
        const banner = document.createElement('div');
        banner.style.cssText = 'position: fixed; bottom: 0; left: 0; right: 0; z-index: 50; background-color: var(--color-surface); border-top: 1px solid var(--color-border); box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1); padding: 1rem;';
        banner.innerHTML = `
          <div style="max-width: 80rem; margin: 0 auto; display: flex; align-items: center; justify-content: space-between; gap: 1rem; flex-wrap: wrap;">
            <div style="flex: 1; min-width: 200px;">
              <p style="font-size: 0.875rem; color: var(--color-text-secondary); margin: 0;">
                🍪 We use cookies to improve your experience and analytics.
                <a href="/privacy" style="color: var(--color-primary); text-decoration: underline;">Learn more</a>
              </p>
            </div>
            <div style="display: flex; gap: 0.5rem;">
              <button onclick="handleFallbackConsent(false)"
                      style="padding: 0.5rem 1rem; font-size: 0.875rem; background-color: var(--color-surface-secondary); color: var(--color-text-secondary); border: 1px solid var(--color-border); border-radius: 0.375rem; cursor: pointer; transition: all 0.2s ease;"
                      onmouseover="this.style.backgroundColor='var(--color-border)'"
                      onmouseout="this.style.backgroundColor='var(--color-surface-secondary)'">
                Necessary only
              </button>
              <button onclick="handleFallbackConsent(true)"
                      style="padding: 0.5rem 1rem; font-size: 0.875rem; background-color: var(--color-primary); color: var(--color-text-inverse); border: none; border-radius: 0.375rem; cursor: pointer; transition: all 0.2s ease;"
                      onmouseover="this.style.backgroundColor='var(--color-primary-hover)'"
                      onmouseout="this.style.backgroundColor='var(--color-primary)'">
                Accept all
              </button>
            </div>
          </div>
        `;
        document.body.appendChild(banner);
      }

      window.handleFallbackConsent = function(acceptAll) {
        const consent = {
          version: '1.0',
          state: {
            necessary: true,
            analytics: acceptAll,
            marketing: acceptAll,
            timestamp: Date.now()
          }
        };

        localStorage.setItem('freeformathub_consent', JSON.stringify(consent));

        // Update Google consent mode
        if (window.gtag) {
          window.gtag('consent', 'update', {
            'analytics_storage': acceptAll ? 'granted' : 'denied',
            'ad_storage': acceptAll ? 'granted' : 'denied',
            'ad_user_data': acceptAll ? 'granted' : 'denied',
            'ad_personalization': acceptAll ? 'granted' : 'denied'
          });

          if (acceptAll) {
            window.gtag('event', 'page_view', {
              send_to: GA_ID,
              page_title: document.title,
              page_location: window.location.href
            });
          }
        }

        // Remove banner
        const banner = document.querySelector('.fixed.inset-x-0.bottom-0');
        if (banner && banner.innerHTML.includes('We use cookies')) {
          banner.remove();
        }

        console.log('✅ Fallback consent saved:', acceptAll ? 'All accepted' : 'Necessary only');
      };
    </script>

    <!-- Initialize app -->
    <script>
      import('../lib/init').then(({ initializeApp }) => {
        initializeApp();
      });
    </script>

    <!-- Mobile Menu JavaScript -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function() {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenuClose = document.getElementById('mobile-menu-close');
        const mobileMenu = document.getElementById('mobile-menu');
        const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');

        function openMobileMenu() {
          mobileMenu?.classList.add('open');
          mobileMenuOverlay?.classList.add('open');
          document.body.style.overflow = 'hidden';
        }

        function closeMobileMenu() {
          mobileMenu?.classList.remove('open');
          mobileMenuOverlay?.classList.remove('open');
          document.body.style.overflow = '';
        }

        mobileMenuToggle?.addEventListener('click', openMobileMenu);
        mobileMenuClose?.addEventListener('click', closeMobileMenu);
        mobileMenuOverlay?.addEventListener('click', closeMobileMenu);

        // Close menu when clicking navigation links
        const mobileNavLinks = mobileMenu?.querySelectorAll('a');
        mobileNavLinks?.forEach(link => {
          link.addEventListener('click', closeMobileMenu);
        });

        // Close menu on escape key
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape') {
            closeMobileMenu();
          }
        });
      });
    </script>

    <!-- Theme toggle logic moved to <head> to minimize FOUC -->
  </body>
</html>
