---
import '../styles/global.css';
import ToolSearch from '../components/ui/ToolSearch.tsx';
import CookieConsent from '../components/CookieConsent.tsx';
import AdPlacement from '../components/ads/AdPlacement.astro';
import { LogoLink } from '../components/ui/Logo.tsx';

export interface Props {
  title: string;
  description: string;
  keywords?: string[];
  canonical?: string;
  ogImage?: string;
  jsonLd?: Record<string, any>;
  robotsContent?: string;
}

const { 
  title, 
  description, 
  keywords = [],
  canonical,
  ogImage,
  jsonLd,
  robotsContent
} = Astro.props;

// Prefer configured site from astro.config, fall back to production domain
const siteUrl = Astro.site?.href || 'https://freeformathub.com';
const fullTitle = title === 'FreeFormatHub' ? title : `${title} | FreeFormatHub`;
// Normalize canonical to prefer new URL structure without the /tools prefix
const rawPath = Astro.url.pathname;
const normalizedPath = rawPath.startsWith('/tools/')
  ? rawPath.replace(/^\/tools\//, '/')
  : rawPath;
const canonicalURL = canonical || new URL(normalizedPath, siteUrl).href;
const imageUrl = ogImage || new URL('/og-image.png', siteUrl).href;
const ogLocale = 'en_US';
const twitterSite = '@freeformathub';
const robots = robotsContent || 'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1';
// Google Analytics ID (from env with fallback)
const GA_ID = import.meta.env.PUBLIC_GA_MEASUREMENT_ID || 'G-34Z7YVSEZ2';
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />
    {keywords.length > 0 && <meta name="keywords" content={keywords.join(', ')} />}
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="manifest" href="/site.webmanifest" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={imageUrl} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="FreeFormatHub" />
    <meta property="og:locale" content={ogLocale} />
    <meta property="og:image:alt" content={fullTitle} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={imageUrl} />
    <meta name="twitter:site" content={twitterSite} />
    
    <!-- Theme -->
    <meta name="theme-color" content="#3b82f6" />
    <meta name="color-scheme" content="light dark" />
    
    <!-- Preload critical resources (restore when asset exists) -->
    
    <!-- JSON-LD Structured Data -->
    {jsonLd && (
      <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
    )}
    
    <!-- Performance + robots -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="robots" content={robots} />

    <!-- Google AdSense Site Verification -->
    <meta name="google-adsense-account" content={import.meta.env.PUBLIC_ADSENSE_CLIENT_ID} />
    {import.meta.env.PUBLIC_ADSENSE_VERIFICATION && (
      <meta name="google-site-verification" content={import.meta.env.PUBLIC_ADSENSE_VERIFICATION} />
    )}

    <!-- Google Consent Mode v2 (must load before gtag) -->
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}

      // Set default consent state (GDPR compliant - deny all by default)
      gtag('consent', 'default', {
        'ad_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied',
        'analytics_storage': 'denied' // Deny by default, grant after user consent
      });

      console.log('📋 Google Consent Mode initialized - all consent denied by default');
    </script>

    <!-- Google tag (gtag.js) -->
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_ID}`}></script>
    <script define:vars={{GA_ID}}>
      // GA ID injected at build time
      const GA_ID_VALUE = GA_ID;
      // Expose for module scripts
      window.GA_ID = GA_ID_VALUE;
      // Initialize GA4 configuration (consent-aware)
      function initializeGA4() {
        console.log('🔧 Initializing GA4 configuration...');

        gtag('js', new Date());
        gtag('config', GA_ID_VALUE, {
          // Transport method for better reliability
          transport_type: 'beacon',
          // Enable debug mode for development
          debug_mode: location.hostname === 'localhost' || location.hostname === '127.0.0.1',
          // Send page views automatically
          send_page_view: true,
          // Enhanced measurement for better tracking
          enhanced_measurement: true,
          // Custom parameters for better segmentation
          custom_map: {
            custom_parameter_1: 'match_type',
            custom_parameter_2: 'match_score'
          },
          // Real-time reporting
          allow_google_signals: true,
          allow_ad_personalization_signals: true,
          // Add page referrer for better attribution
          page_referrer: document.referrer || '(direct)'
        });

        console.log('✅ GA4 configuration completed');
      }

      // Function to send page view with enhanced data
      function sendPageView() {
        if (typeof gtag !== 'function') {
          console.warn('⚠️ gtag not available for page view tracking');
          return;
        }

        gtag('event', 'page_view', {
          send_to: GA_ID_VALUE,
          page_title: document.title,
          page_location: window.location.href,
          page_path: window.location.pathname,
          page_referrer: document.referrer || '(direct)',
          engagement_time_msec: 1
        });

        console.log('📊 Page view sent to GA4');
      }

      // Function to check consent and initialize tracking
      function checkConsentAndTrack() {
        try {
          const consentData = localStorage.getItem('freeformathub_consent');
          let hasAnalyticsConsent = false;

          if (consentData) {
            const consent = JSON.parse(consentData);
            hasAnalyticsConsent = consent.state && consent.state.analytics;
          }

          console.log('🍪 Analytics consent status:', hasAnalyticsConsent);

          if (hasAnalyticsConsent) {
            // Update consent mode to granted
            gtag('consent', 'update', {
              'analytics_storage': 'granted'
            });

            // Send page view after consent is granted
            sendPageView();

            // Start engagement tracking
            startEngagementTracking();

            console.log('✅ Analytics tracking enabled with user consent');
          } else {
            console.log('❌ Analytics tracking disabled - no user consent');
          }
        } catch (error) {
          console.warn('⚠️ Error checking consent:', error);
        }
      }

      // Track page engagement
      let engagementTimer;
      function startEngagementTracking() {
        function trackEngagement() {
          if (typeof gtag === 'function') {
            gtag('event', 'user_engagement', {
              send_to: GA_ID_VALUE,
              engagement_time_msec: 15000
            });
          }
          clearTimeout(engagementTimer);
          engagementTimer = setTimeout(trackEngagement, 15000);
        }

        setTimeout(trackEngagement, 1000);

        // Track scroll depth
        let scrollDepth = 0;
        window.addEventListener('scroll', () => {
          const currentScroll = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
          if (currentScroll > scrollDepth && currentScroll % 25 === 0 && typeof gtag === 'function') {
            scrollDepth = currentScroll;
            gtag('event', 'scroll', {
              send_to: GA_ID_VALUE,
              percent_scrolled: scrollDepth
            });
          }
        });

        console.log('📈 Engagement tracking started');
      }

      // Initialize GA4 immediately
      initializeGA4();

      // Check consent after DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', checkConsentAndTrack);
      } else {
        setTimeout(checkConsentAndTrack, 100);
      }

      // Listen for consent changes
      window.addEventListener('storage', function(e) {
        if (e.key === 'freeformathub_consent') {
          checkConsentAndTrack();
        }
      });

      // Listen for custom consent events
      window.addEventListener('consentChanged', function(e) {
        if (e.detail && e.detail.analytics) {
          checkConsentAndTrack();
        }
      });

      // Initialize enhanced tracking after a brief delay
      setTimeout(() => {
        if (typeof window !== 'undefined' && window.initEnhancedTracking) {
          window.initEnhancedTracking();
        }
      }, 2000);

      console.log('🚀 GA4 system initialized with consent-aware tracking');
    </script>

    <!-- Enhanced Analytics Tracking -->
    <script is:inline>
      // Read GA ID from global (set by classic script)
      const GA_ID = window.GA_ID || 'G-34Z7YVSEZ2';
      // Enhanced tracking initialization - inline to avoid import issues
      function initEnhancedTracking() {
        if (typeof window === 'undefined' || typeof window.gtag !== 'function') {
          console.log('Enhanced tracking: gtag not available');
          return;
        }

        // Track initial page performance
        if (window.performance) {
          const navigation = window.performance.getEntriesByType('navigation')[0];
          if (navigation) {
            setTimeout(() => {
              window.gtag('event', 'performance', {
                send_to: GA_ID_VALUE,
                metric_name: 'page_load_time',
                metric_value: navigation.loadEventEnd - navigation.fetchStart,
                custom_parameter_1: (navigator?.connection?.effectiveType || 'unknown')
              });
            }, 1000);
          }
        }

        // Track device and viewport info
        window.gtag('event', 'device_info', {
          send_to: GA_ID_VALUE,
          screen_resolution: `${screen.width}x${screen.height}`,
          viewport_size: `${window.innerWidth}x${window.innerHeight}`,
          color_depth: screen.colorDepth,
          pixel_ratio: window.devicePixelRatio,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          language: navigator.language
        });

        console.log('✅ Enhanced analytics tracking initialized');
      }

      // Make tracking available globally
      window.initEnhancedTracking = initEnhancedTracking;

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initEnhancedTracking);
      } else {
        initEnhancedTracking();
      }
    </script>

    <!-- Google AdSense Auto ads - Consent-aware loading -->
    <script>
      (function() {
        // Function to load AdSense when consent is granted
        function loadAdSense() {
          if (document.getElementById('adsense-script')) return; // Already loaded

          const clientId = import.meta.env.PUBLIC_ADSENSE_CLIENT_ID;
          if (!clientId || clientId === 'ca-pub-placeholder') {
            console.warn('AdSense client ID not properly configured');
            return;
          }

          const script = document.createElement('script');
          script.id = 'adsense-script';
          script.async = true;
          script.src = `https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${clientId}`;
          script.crossOrigin = 'anonymous';
          document.head.appendChild(script);

          // Initialize adsbygoogle array
          window.adsbygoogle = window.adsbygoogle || [];
        }

        // Check consent on page load
        function checkConsent() {
          try {
            const consentData = localStorage.getItem('freeformathub_consent');
            if (consentData) {
              const consent = JSON.parse(consentData);
              if (consent.state && consent.state.marketing) {
                loadAdSense();
              }
            }
          } catch (error) {
            console.warn('Error checking consent:', error);
          }
        }

        // Check consent immediately
        checkConsent();

        // Listen for consent changes
        window.addEventListener('storage', function(e) {
          if (e.key === 'freeformathub_consent') {
            checkConsent();
          }
        });

        // Also listen for custom consent events
        window.addEventListener('consentChanged', function(e) {
          if (e.detail && e.detail.marketing) {
            loadAdSense();
          }
        });
      })();
    </script>

    <!-- Early theme init to prevent FOUC -->
    <script>
      (function() {
        const html = document.documentElement;
        const systemDarkQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const getSaved = () => localStorage.getItem('theme') || 'auto';
        const applyTheme = (theme) => {
          const systemPrefersDark = systemDarkQuery.matches;
          const dark = theme === 'dark' || (theme === 'auto' && systemPrefersDark);
          html.classList.toggle('dark', dark);
        };
        // Apply immediately based on saved/system
        applyTheme(getSaved());
        // Bind toggle after DOM is ready
        window.addEventListener('DOMContentLoaded', () => {
          const themeToggle = document.getElementById('theme-toggle');
          themeToggle?.addEventListener('click', () => {
            const current = html.classList.contains('dark') ? 'light' : 'dark';
            localStorage.setItem('theme', current);
            applyTheme(current);
          });
        });
        // React to system changes when in auto
        systemDarkQuery.addEventListener('change', () => {
          if (getSaved() === 'auto') applyTheme('auto');
        });
      })();
    </script>
  </head>
  
  <body style="background-color: var(--color-background); color: var(--color-text-primary);">
    <!-- Skip to main content -->
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4
             bg-blue-600 text-white px-4 py-2 rounded-md z-50
             focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
    >
      Skip to main content
    </a>

    <div class="min-h-full flex flex-col">
      <!-- Modern Header -->
      <header class="sticky-top" style="background-color: var(--color-surface); border-bottom: 1px solid var(--color-border); box-shadow: var(--shadow-sm);">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between items-center h-20">
            <!-- Logo -->
            <div class="flex items-center">
              <LogoLink href="/" size="small" client:load />
            </div>

            <!-- Centered Search -->
            <div class="flex-1 max-w-2xl mx-12">
              <div style="background-color: var(--color-surface-secondary); border-radius: var(--radius-xl); padding: var(--space-sm);">
                <ToolSearch
                  placeholder="Search 100+ developer tools..."
                  size="large"
                  client:load
                />
              </div>
            </div>

            <!-- Actions -->
            <div class="flex items-center gap-3">
              <!-- Theme toggle -->
              <button
                id="theme-toggle"
                type="button"
                class="btn btn-outline"
                style="padding: var(--space-md); border-radius: var(--radius-lg);"
                aria-label="Toggle theme"
              >
                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                </svg>
              </button>

              <!-- Navigation Menu -->
              <div class="hidden md:flex items-center gap-1">
                <a href="/" class="btn btn-outline" style="font-weight: 500;">Home</a>
                <a href="/tools" class="btn btn-outline" style="font-weight: 500;">Tools</a>
              </div>
            </div>
          </div>
        </div>
      </header>

      <!-- Main content -->
      <main id="main-content" class="flex-1">
        <slot />
      </main>

      <!-- Footer -->
      <footer class="bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
        <!-- Footer Ad Placement -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <AdPlacement type="footer" lazy={true} />
        </div>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div class="grid grid-cols-2 md:grid-cols-4 gap-8">
            <div>
              <h3 class="text-sm font-semibold text-gray-900 dark:text-gray-100 uppercase tracking-wider">Tools</h3>
              <ul class="mt-4 space-y-2">
                <li><a href="/formatters/json-formatter" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">JSON Formatter</a></li>
                <li><a href="/encoders/base64-encoder" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Base64 Encoder</a></li>
                <li><a href="/encoders/url-encoder" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">URL Encoder</a></li>
                <li><a href="/encoders/jwt-decoder" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">JWT Decoder</a></li>
              </ul>
            </div>
            <div>
              <h3 class="text-sm font-semibold text-gray-900 dark:text-gray-100 uppercase tracking-wider">Categories</h3>
              <ul class="mt-4 space-y-2">
                <li><a href="/formatters" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Formatters</a></li>
                <li><a href="/converters" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Converters</a></li>
                <li><a href="/encoders" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Encoders</a></li>
                <li><a href="/text" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Text Tools</a></li>
              </ul>
            </div>
            <div>
              <h3 class="text-sm font-semibold text-gray-900 dark:text-gray-100 uppercase tracking-wider">Support</h3>
              <ul class="mt-4 space-y-2">
                <li><a href="/about" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">About</a></li>
                <li><a href="/privacy" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Privacy Policy</a></li>
                <li><a href="/terms" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Terms of Service</a></li>
                <li><a href="/contact" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600">Contact</a></li>
              </ul>
            </div>
            <div class="flex justify-center items-start">
              <AdPlacement type="sidebar" lazy={true} />
            </div>
          </div>
          <div class="mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
            <p class="text-sm text-gray-600 dark:text-gray-400 text-center">
              © 2024 FreeFormatHub. All rights reserved. | Z MARIN, obrt za usluge, Kijevska 5, Split, Croatia, EU, MBS 98472739
            </p>
          </div>
        </div>
      </footer>
    </div>

    <!-- Cookie Consent Banner -->
    <CookieConsent client:load />

    <!-- Fallback Cookie Consent Script (in case React component fails to load) -->
    <script>
      // Fallback consent banner if React component doesn't load
      setTimeout(() => {
        if (typeof window !== 'undefined' && !localStorage.getItem('freeformathub_consent')) {
          // Check if React component is visible
          const existingBanner = document.querySelector('[data-testid="cookie-consent"]') ||
                                 document.querySelector('.fixed.inset-x-0.bottom-0');

          if (!existingBanner) {
            console.log('🍪 React cookie banner not detected, showing fallback');
            showFallbackCookieBanner();
          }
        }
      }, 3000); // Wait 3 seconds for React to hydrate

      function showFallbackCookieBanner() {
        const banner = document.createElement('div');
        banner.className = 'fixed inset-x-0 bottom-0 z-50 bg-white dark:bg-gray-900 border-t border-gray-200 shadow-lg p-4';
        banner.innerHTML = `
          <div class="max-w-7xl mx-auto flex items-center justify-between gap-4">
            <div class="flex-1">
              <p class="text-sm text-gray-600 dark:text-gray-400">
                🍪 We use cookies to improve your experience and analytics.
                <a href="/privacy" class="text-blue-600 underline">Learn more</a>
              </p>
            </div>
            <div class="flex gap-2">
              <button onclick="handleFallbackConsent(false)"
                      class="px-4 py-2 text-sm bg-gray-200 hover:bg-gray-300 rounded">
                Necessary only
              </button>
              <button onclick="handleFallbackConsent(true)"
                      class="px-4 py-2 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded">
                Accept all
              </button>
            </div>
          </div>
        `;
        document.body.appendChild(banner);
      }

      window.handleFallbackConsent = function(acceptAll) {
        const consent = {
          version: '1.0',
          state: {
            necessary: true,
            analytics: acceptAll,
            marketing: acceptAll,
            timestamp: Date.now()
          }
        };

        localStorage.setItem('freeformathub_consent', JSON.stringify(consent));

        // Update Google consent mode
        if (window.gtag) {
          window.gtag('consent', 'update', {
            'analytics_storage': acceptAll ? 'granted' : 'denied',
            'ad_storage': acceptAll ? 'granted' : 'denied',
            'ad_user_data': acceptAll ? 'granted' : 'denied',
            'ad_personalization': acceptAll ? 'granted' : 'denied'
          });

          if (acceptAll) {
            window.gtag('event', 'page_view', {
              send_to: GA_ID_VALUE,
              page_title: document.title,
              page_location: window.location.href
            });
          }
        }

        // Remove banner
        const banner = document.querySelector('.fixed.inset-x-0.bottom-0');
        if (banner && banner.innerHTML.includes('We use cookies')) {
          banner.remove();
        }

        console.log('✅ Fallback consent saved:', acceptAll ? 'All accepted' : 'Necessary only');
      };
    </script>

    <!-- Initialize app -->
    <script>
      import('../lib/init').then(({ initializeApp }) => {
        initializeApp();
      });
    </script>

    <!-- Theme toggle logic moved to <head> to minimize FOUC -->
  </body>
</html>
