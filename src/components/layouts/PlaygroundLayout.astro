---
import type { Tool } from '../../types';
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdPlacement from '../ads/AdPlacement.astro';

export interface Props {
  tool: Tool;
  children?: any;
}

const { tool } = Astro.props;

// Generate structured data for the tool
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "SoftwareApplication",
  "name": tool.name,
  "description": tool.description,
  "applicationCategory": "BusinessApplication",
  "operatingSystem": "Any",
  "permissions": "no-storage",
  "isAccessibleForFree": true,
  "creator": {
    "@type": "Organization",
    "name": "FreeFormatHub"
  }
};
---

<BaseLayout
  title={tool.seoTitle}
  description={tool.seoDescription}
  keywords={tool.keywords}
  jsonLd={jsonLd}
>
  <!-- Playground Header with Controls -->
  <section style="background-color: var(--color-surface); border-bottom: 1px solid var(--color-border);">
    <div class="max-w-full mx-auto px-4 py-4">
      <div class="flex items-center justify-between">
        <!-- Tool Info -->
        <div class="flex items-center gap-3">
          <div style="
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--color-primary), var(--color-accent));
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            color: white;
          ">
            {tool.icon}
          </div>
          <div>
            <h1 style="
              font-size: 1.25rem;
              font-weight: 700;
              color: var(--color-text-primary);
              margin: 0;
              line-height: 1.2;
            ">
              {tool.name}
            </h1>
            <p style="
              font-size: 0.875rem;
              color: var(--color-text-secondary);
              margin: 0;
              line-height: 1.3;
            ">
              Interactive playground mode
            </p>
          </div>
        </div>

        <!-- Playground Controls -->
        <div class="flex items-center gap-3">
          <!-- Breadcrumbs in compact form -->
          {tool.layoutOptions?.showBreadcrumbs !== false && (
            <nav aria-label="Breadcrumb" class="text-sm hidden md:block">
              <a href="/" style="color: var(--color-text-secondary);" class="hover:text-blue-600">Home</a>
              <span style="color: var(--color-text-muted); margin: 0 6px;">â€¢</span>
              <a href={`/${tool.category?.id || ''}`} style="color: var(--color-text-secondary);" class="hover:text-blue-600">
                {tool.category?.name || 'Tools'}
              </a>
            </nav>
          )}

          <!-- Playground Actions -->
          <div class="flex items-center gap-2">
            <button
              id="fullscreen-toggle"
              style="
                padding: var(--space-sm) var(--space-md);
                background-color: var(--color-surface-secondary);
                border: 1px solid var(--color-border);
                border-radius: var(--radius-md);
                color: var(--color-text-secondary);
                font-size: 0.875rem;
                cursor: pointer;
                transition: all var(--transition-fast);
              "
              class="hover:bg-gray-100 dark:hover:bg-gray-700"
              title="Toggle fullscreen"
            >
              <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5"/>
              </svg>
            </button>

            <button
              id="settings-toggle"
              style="
                padding: var(--space-sm) var(--space-md);
                background-color: var(--color-surface-secondary);
                border: 1px solid var(--color-border);
                border-radius: var(--radius-md);
                color: var(--color-text-secondary);
                font-size: 0.875rem;
                cursor: pointer;
                transition: all var(--transition-fast);
              "
              class="hover:bg-gray-100 dark:hover:bg-gray-700"
              title="Settings"
            >
              <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Playground Layout -->
  <div style="height: calc(100vh - 80px); display: flex; flex-direction: column;">
    <!-- Main Playground Area -->
    <div style="flex: 1; display: flex; overflow: hidden;">

      <!-- Tool Interface - Full height playground -->
      <div style="flex: 1; display: flex; flex-direction: column; background: var(--color-surface);">
        <!-- Split view support if enabled -->
        {tool.layoutOptions?.enableSplitView ? (
          <div style="flex: 1; display: grid; grid-template-columns: 1fr 1fr; gap: 1px; background: var(--color-border);">
            <div style="background: var(--color-surface); overflow: hidden;">
              <slot name="input" />
            </div>
            <div style="background: var(--color-surface); overflow: hidden;">
              <slot name="output" />
            </div>
          </div>
        ) : (
          <div style="flex: 1; overflow: hidden;">
            <slot />
          </div>
        )}
      </div>

      <!-- Optional Right Panel for Documentation/Examples -->
      <div
        id="docs-panel"
        style="
          width: 300px;
          background: var(--color-surface-secondary);
          border-left: 1px solid var(--color-border);
          overflow-y: auto;
          transform: translateX(100%);
          transition: transform var(--transition-medium);
        "
        class="hidden lg:block"
      >
        <div style="padding: var(--space-lg);">
          <!-- Quick Examples -->
          {tool.examples && tool.examples.length > 0 && (
            <div style="margin-bottom: var(--space-xl);">
              <h3 style="font-size: 1rem; font-weight: 600; margin-bottom: var(--space-lg); color: var(--color-text-primary);">
                Quick Examples
              </h3>
              <div style="space-y: var(--space-md);">
                {tool.examples.slice(0, 3).map((example: any) => (
                  <div
                    class="example-item cursor-pointer"
                    style="
                      padding: var(--space-md);
                      background-color: var(--color-surface);
                      border: 1px solid var(--color-border);
                      border-radius: var(--radius-md);
                      transition: all var(--transition-fast);
                    "
                    data-input={example.input}
                    title="Click to use this example"
                  >
                    <div style="font-weight: 500; color: var(--color-text-primary); font-size: 0.875rem; margin-bottom: var(--space-xs);">
                      {example.title}
                    </div>
                    <div style="color: var(--color-text-secondary); font-size: 0.75rem; font-family: monospace; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                      {example.input.slice(0, 40)}...
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <!-- Use Cases -->
          {tool.useCases && tool.useCases.length > 0 && (
            <div style="margin-bottom: var(--space-xl);">
              <h3 style="font-size: 1rem; font-weight: 600; margin-bottom: var(--space-lg); color: var(--color-text-primary);">
                Use Cases
              </h3>
              <ul style="space-y: var(--space-sm);">
                {tool.useCases.slice(0, 4).map((useCase: string) => (
                  <li style="display: flex; align-items: flex-start; gap: var(--space-sm); color: var(--color-text-secondary); font-size: 0.875rem; line-height: 1.4;">
                    <div style="width: 3px; height: 3px; background-color: var(--color-primary); border-radius: 50%; margin-top: 6px; flex-shrink: 0;"></div>
                    {useCase}
                  </li>
                ))}
              </ul>
            </div>
          )}

          <!-- Ad Placement -->
          <div style="margin: var(--space-xl) 0; padding: var(--space-md); background-color: var(--color-surface); border: 1px dashed var(--color-border); border-radius: var(--radius-md); text-align: center;">
            <AdPlacement type="sidebar" lazy={true} />
          </div>
        </div>
      </div>
    </div>

    <!-- Bottom Status/Control Bar -->
    <div style="
      height: 40px;
      background-color: var(--color-surface-secondary);
      border-top: 1px solid var(--color-border);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 var(--space-lg);
    ">
      <!-- Status Info -->
      <div class="flex items-center gap-4 text-sm">
        <div style="display: flex; align-items: center; gap: var(--space-xs); color: var(--color-text-secondary);">
          <div style="width: 6px; height: 6px; background-color: var(--color-success); border-radius: 50%;"></div>
          <span>Ready</span>
        </div>
        <div style="color: var(--color-text-muted);">
          Privacy: 100% Client-side
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex items-center gap-2">
        <button
          id="docs-toggle"
          style="
            padding: var(--space-xs) var(--space-sm);
            background: transparent;
            border: 1px solid var(--color-border);
            border-radius: var(--radius-sm);
            color: var(--color-text-secondary);
            font-size: 0.75rem;
            cursor: pointer;
            transition: all var(--transition-fast);
          "
          class="hover:bg-gray-100 dark:hover:bg-gray-700 hidden lg:block"
        >
          Toggle Docs
        </button>

        <div style="color: var(--color-text-muted); font-size: 0.75rem;">
          {tool.category?.name || 'Tool'}
        </div>
      </div>
    </div>
  </div>

  <script>
    // Playground functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Fullscreen toggle
      const fullscreenBtn = document.getElementById('fullscreen-toggle');
      fullscreenBtn?.addEventListener('click', () => {
        if (document.fullscreenElement) {
          document.exitFullscreen();
        } else {
          document.documentElement.requestFullscreen();
        }
      });

      // Docs panel toggle
      const docsToggle = document.getElementById('docs-toggle');
      const docsPanel = document.getElementById('docs-panel');
      let docsVisible = false;

      docsToggle?.addEventListener('click', () => {
        docsVisible = !docsVisible;
        if (docsPanel) {
          docsPanel.style.transform = docsVisible ? 'translateX(0)' : 'translateX(100%)';
        }
      });

      // Example click handlers
      document.querySelectorAll('.example-item').forEach(item => {
        item.addEventListener('click', () => {
          const input = item.getAttribute('data-input');
          // Dispatch custom event for tool components to listen to
          window.dispatchEvent(new CustomEvent('playground-example-selected', {
            detail: { input }
          }));
        });
      });
    });
  </script>
</BaseLayout>