---
export interface BreadcrumbItem {
  name: string;
  url: string;
  current?: boolean;
}

export interface Props {
  items: BreadcrumbItem[];
  className?: string;
}

const { items, className = '' } = Astro.props;
const baseUrl = 'https://freeformathub.com';

// Generate structured data for breadcrumbs
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": items.map((item, index) => {
    const breadcrumbItem: any = {
      "@type": "ListItem",
      "position": index + 1,
      "name": item.name
    };

    // Only add item field for non-current items, and ensure absolute URLs
    if (!item.current) {
      const absoluteUrl = item.url.startsWith('http') ? item.url : baseUrl + item.url;
      breadcrumbItem.item = absoluteUrl;
    }

    return breadcrumbItem;
  })
};
---

<nav class={`flex ${className}`} aria-label="Breadcrumb">
  <ol class="flex items-center space-x-2 text-sm">
    {items.map((item, index) => (
      <li class="flex items-center">
        {index > 0 && (
          <svg class="w-4 h-4 text-gray-400 mx-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
          </svg>
        )}
        {item.current ? (
          <span class="text-gray-900 dark:text-gray-100 font-medium truncate max-w-xs">
            {item.name}
          </span>
        ) : (
          <a 
            href={item.url} 
            class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors truncate max-w-xs"
          >
            {item.name}
          </a>
        )}
      </li>
    ))}
  </ol>
</nav>

<!-- JSON-LD structured data for breadcrumbs -->
<script type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>