---
import { getToolStaticPaths } from '../../lib/routing/category-routes';
import ToolShell from '../../components/common/ToolShell.astro';

export async function getStaticPaths() {
  return getToolStaticPaths();
}

const { category, slug } = Astro.params;
const { tool } = Astro.props;

if (!tool) {
  return Astro.redirect('/404');
}

// Dynamically import the tool component based on slug (kebab-case -> PascalCase)
const componentName = slug
  .split('-')
  .map(part => part.charAt(0).toUpperCase() + part.slice(1))
  .join('');

let ToolComponent;
try {
  const componentModule = await import(`../../components/tools/${category}/${componentName}.tsx`);
  ToolComponent = componentModule[componentName] || componentModule.default;
} catch (error) {
  console.error(`Failed to load component for ${tool.name}:`, error);
  return Astro.redirect('/404');
}
---

<ToolShell tool={tool}>
  <div id="tool-container"></div>
  <script define:vars={{ category, componentName }}>
    import(`../../components/tools/${category}/${componentName}.tsx`).then((module) => {
      const Comp = module[componentName] || module.default;
      if (!Comp) return;
      import('react').then((React) => {
        import('react-dom/client').then((ReactDOM) => {
          const root = ReactDOM.createRoot(document.getElementById('tool-container'));
          root.render(React.createElement(Comp));
        });
      });
    }).catch((err) => {
      console.error('Failed to load tool component', err);
    });
  </script>
</ToolShell>
