---
export const prerender = true;
import BaseLayout from '../../layouts/BaseLayout.astro';

const pageTitle = 'Analytics Health';
const pageDesc = 'Diagnostics for GA (gtag) and consent mode.';
const buildTimeGA = import.meta.env.PUBLIC_GA_MEASUREMENT_ID || '(unset)';
---

<BaseLayout title={pageTitle} description={pageDesc} robotsContent="noindex, nofollow">
  <section class="py-10">
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-2xl font-bold mb-4">Analytics Health</h1>
      <p class="text-sm text-gray-600 mb-6">
        Quick diagnostics for Google Analytics and consent mode.
      </p>

      <div class="space-y-4" id="debug-section">
        <div class="p-4 rounded border border-gray-200">
          <h2 class="font-semibold mb-2">Status</h2>
          <ul class="text-sm" id="status-list">
            <li><strong>Build-time GA ID</strong>: <code id="build-ga"></code></li>
            <li><strong>window.GA_ID</strong>: <code id="runtime-ga"></code></li>
            <li><strong>gtag available</strong>: <code id="gtag-avail"></code></li>
            <li><strong>dataLayer length</strong>: <code id="datalayer-len"></code></li>
            <li><strong>Analytics consent</strong>: <code id="consent-analytics"></code></li>
            <li><strong>Marketing consent</strong>: <code id="consent-marketing"></code></li>
          </ul>
        </div>

        <div class="p-4 rounded border border-gray-200">
          <h2 class="font-semibold mb-2">Actions</h2>
          <div class="flex gap-2 flex-wrap">
            <button id="btn-grant-analytics" class="px-3 py-2 bg-blue-600 text-white rounded">Grant Analytics</button>
            <button id="btn-revoke-analytics" class="px-3 py-2 bg-gray-700 text-white rounded">Revoke Analytics</button>
            <button id="btn-send-event" class="px-3 py-2 bg-green-600 text-white rounded">Send Test Event</button>
            <button id="btn-reset-consent" class="px-3 py-2 bg-rose-600 text-white rounded">Reset Consent</button>
          </div>
          <p class="text-xs text-gray-500 mt-2">Note: These actions update localStorage and trigger consent mode updates.</p>
        </div>

        <div class="p-4 rounded border border-gray-200">
          <h2 class="font-semibold mb-2">Last Action</h2>
          <pre id="log" class="text-xs bg-gray-50 p-3 rounded overflow-auto"></pre>
        </div>
      </div>
    </div>
  </section>

  <script is:inline define:vars={{buildTimeGA}}>
    (function () {
      const buildGA = JSON.stringify(buildTimeGA);
      const $ = (id) => document.getElementById(id);

      function readConsent() {
        try {
          const raw = localStorage.getItem('freeformathub_consent');
          if (!raw) return { analytics: false, marketing: false };
          const parsed = JSON.parse(raw);
          return {
            analytics: !!parsed?.state?.analytics,
            marketing: !!parsed?.state?.marketing
          };
        } catch (e) {
          return { analytics: false, marketing: false };
        }
      }

      function render() {
        const consent = readConsent();
        $('build-ga').textContent = buildGA;
        $('runtime-ga').textContent = window.GA_ID || '(unset)';
        $('gtag-avail').textContent = typeof window.gtag === 'function' ? 'yes' : 'no';
        $('datalayer-len').textContent = Array.isArray(window.dataLayer) ? String(window.dataLayer.length) : 'n/a';
        $('consent-analytics').textContent = String(consent.analytics);
        $('consent-marketing').textContent = String(consent.marketing);
      }

      function setConsent(analyticsGranted) {
        const now = Date.now();
        const data = {
          version: '1.0',
          state: {
            necessary: true,
            analytics: !!analyticsGranted,
            marketing: readConsent().marketing,
            timestamp: now
          }
        };
        localStorage.setItem('freeformathub_consent', JSON.stringify(data));
        if (window.gtag) {
          window.gtag('consent', 'update', {
            analytics_storage: analyticsGranted ? 'granted' : 'denied'
          });
        }
        log(`Consent updated: analytics=${analyticsGranted}`);
        render();
      }

      function resetConsent() {
        localStorage.removeItem('freeformathub_consent');
        if (window.gtag) {
          window.gtag('consent', 'update', {
            analytics_storage: 'denied',
            ad_storage: 'denied',
            ad_user_data: 'denied',
            ad_personalization: 'denied'
          });
        }
        log('Consent reset to defaults (denied)');
        render();
      }

      function sendTestEvent() {
        if (!window.gtag) {
          log('gtag not available');
          return;
        }
        const ga = window.GA_ID || buildGA;
        window.gtag('event', 'debug_test', {
          send_to: ga,
          test_event: true,
          page_title: document.title,
          page_location: window.location.href,
          ts: Date.now()
        });
        log(`Sent test event to ${ga}`);
      }

      function log(msg) {
        const el = $('log');
        const time = new Date().toISOString();
        el.textContent = `[${time}] ${msg}\n` + el.textContent;
      }

      $('btn-grant-analytics').addEventListener('click', () => setConsent(true));
      $('btn-revoke-analytics').addEventListener('click', () => setConsent(false));
      $('btn-send-event').addEventListener('click', sendTestEvent);
      $('btn-reset-consent').addEventListener('click', resetConsent);

      render();
      log('Diagnostics initialized');
    })();
  </script>
</BaseLayout>

